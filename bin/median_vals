#!/usr/bin/env perl

# Copyright (C) 2007-2009 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Find the median values in the stream for given keys.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


use warnings;
use strict;
use Maasha::Biopieces;
use Maasha::Calc;


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


my ( $options, $in, $out, $record, $new_record, $key, %median_hash, $median, $fh );

$options = Maasha::Biopieces::parse_options(
    [
        { long => 'no_stream', short => 'x', type => 'flag',   mandatory => 'no', default => undef, allowed => undef, disallowed => undef },
        { long => 'data_out',  short => 'o', type => 'file',   mandatory => 'no', default => undef, allowed => undef, disallowed => undef },
        { long => 'keys',      short => 'k', type => 'list',   mandatory => 'no', default => undef, allowed => undef, disallowed => undef },
        { long => 'list',      short => 'l', type => 'string', mandatory => 'no', default => undef, allowed => undef, disallowed => undef },
    ]   
);

Maasha::Common::error( qq(both --keys and --list specified) ) if     $options->{ "keys" } and     $options->{ "list" };
Maasha::Common::error( qq(no --keys or --list specified) )    if not $options->{ "keys" } and not $options->{ "list" };

$in  = Maasha::Biopieces::read_stream( $options->{ "stream_in" } );
$out = Maasha::Biopieces::write_stream( $options->{ "stream_out" } );

while ( $record = Maasha::Biopieces::get_record( $in ) ) 
{
    foreach $key ( @{ $options->{ "keys" } } ) {
        push @{ $median_hash{ $key } }, $record->{ $key } if defined $record->{ $key };
    }

    if ( $options->{ 'list' } and $record->{ $options->{ 'list' } } ) {
        $record->{ $options->{ 'list' } . "_MEDIAN" } = sprintf( "%.2f", Maasha::Calc::median( [ split ";", $record->{ $options->{ 'list' } } ] ) );
    }

    Maasha::Biopieces::put_record( $record, $out ) if not $options->{ "no_stream" };
}

Maasha::Biopieces::close_stream( $in );
Maasha::Biopieces::close_stream( $out );

$fh = Maasha::Biopieces::write_stream( $options->{ "data_out" } );

foreach $key ( @{ $options->{ "keys" } } )
{
    if ( $median_hash{ $key } ) {
        $median = Maasha::Calc::median( $median_hash{ $key } );
    } else {
        $median = "N/A";
    }

    $new_record->{ $key . "_MEDIAN" } = $median;
}

if ( $options->{ "keys" } and $new_record )
{
    $new_record->{ 'REC_TYPE' } = "MEDIAN";

    Maasha::Biopieces::put_record( $new_record, $fh );
}

close $fh;


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


BEGIN
{
    Maasha::Biopieces::status_set();
}


END
{
    Maasha::Biopieces::status_log();
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
