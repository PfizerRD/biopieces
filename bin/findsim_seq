#!/usr/bin/env ruby

# Copyright (C) 2007-2012 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# This program is part of the Biopieces framework (www.biopieces.org).

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Find similar sequences between query sequences from the stream and a database.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

require 'pp'
require 'maasha/biopieces'
require 'maasha/fasta'
require 'maasha/findsim'

casts = []
casts << {:long=>'database',      :short=>'d', :type=>'file!', :mandatory=>true,  :default=>nil, :allowed=>nil,           :disallowed=>nil}
casts << {:long=>'kmer',          :short=>'k', :type=>'uint',  :mandatory=>false, :default=>8,   :allowed=>"4,5,6,7,8,9", :disallowed=>nil}
casts << {:long=>'step',          :short=>'s', :type=>'uint',  :mandatory=>false, :default=>1,   :allowed=>nil,           :disallowed=>"0"}
casts << {:long=>'min_score',     :short=>'m', :type=>'float', :mandatory=>false, :default=>0.5, :allowed=>nil,           :disallowed=>nil}
casts << {:long=>'max_hits',      :short=>'h', :type=>'uint',  :mandatory=>false, :default=>20,  :allowed=>nil,           :disallowed=>"0"}
casts << {:long=>'max_diversity', :short=>'M', :type=>'float', :mandatory=>false, :default=>nil, :allowed=>nil,           :disallowed=>nil}
casts << {:long=>'query_ids',     :short=>'Q', :type=>'flag',  :mandatory=>false, :default=>nil, :allowed=>nil,           :disallowed=>nil}
casts << {:long=>'subject_ids',   :short=>'S', :type=>'flag',  :mandatory=>false, :default=>nil, :allowed=>nil,           :disallowed=>nil}
casts << {:long=>'realign',       :short=>'r', :type=>'flag',  :mandatory=>false, :default=>nil, :allowed=>nil,           :disallowed=>nil}

options    = Biopieces.options_parse(ARGV, casts)
tmpdir     = Biopieces.mktmpdir
query_file = File.join(tmpdir, "query.fna")

Biopieces.open(options[:stream_in], options[:stream_out]) do |input, output|
  Fasta.open(query_file, "w") do |fasta_io|
    input.each_record do |record|
      if record[:SEQ_NAME] and record[:SEQ]
        entry = Seq.new_bp(record)

        fasta_io.puts entry.to_fasta
      end

      output.puts record
    end
  end

  fs = FindSim.new(options)
  fs.load_query(query_file)
  fs.search_db(options[:database])

  fs.each do |hit|
    output.puts hit.to_bp
  end
end

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
