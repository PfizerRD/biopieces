#!/usr/bin/env perl

# Copyright (C) 2007-2009 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Plot chromosome distribution histogram.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


use warnings;
use strict;
use Maasha::Biopieces;
use Maasha::Plot;
use Maasha::Matrix;
use Maasha::Filesys;
use Maasha::UCSC;
use Maasha::UCSC::Wiggle;


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


my ( $options, $in, $out, $default, $terminals, $phastcons_file, $phastcons_index,
     $index, $fh_phastcons, $record, $scores, $AoA, $plot, $fh, $tmp_dir );

$default   = "PhastCons Profiles";
$terminals = "dumb,x11,aqua,post,svg";

$options = Maasha::Biopieces::parse_options(
    [
        { long => 'no_stream',  short => 'x', type => 'flag',   mandatory => 'no',  default => undef,    allowed => undef,      disallowed => undef },
        { long => 'data_out',   short => 'o', type => 'file',   mandatory => 'no',  default => undef,    allowed => undef,      disallowed => undef },
        { long => 'genome',     short => 'g', type => 'genome', mandatory => 'yes', default => undef,    allowed => undef,      disallowed => undef },
        { long => 'mean',       short => 'm', type => 'flag',   mandatory => 'no',  default => undef,    allowed => undef,      disallowed => undef },
        { long => 'median',     short => 'M', type => 'flag',   mandatory => 'no',  default => undef,    allowed => undef,      disallowed => undef },
        { long => 'flank',      short => 'f', type => 'uint',   mandatory => 'no',  default => 0,        allowed => undef,      disallowed => undef },
        { long => 'terminal',   short => 't', type => 'string', mandatory => 'no',  default => 'dumb',   allowed => $terminals, disallowed => undef },
        { long => 'title',      short => 'T', type => 'string', mandatory => 'no',  default => $default, allowed => undef,      disallowed => undef },
        { long => 'xlabel',     short => 'X', type => 'string', mandatory => 'no',  default => undef,    allowed => undef,      disallowed => undef },
        { long => 'ylabel',     short => 'Y', type => 'string', mandatory => 'no',  default => undef,    allowed => undef,      disallowed => undef },
        { long => 'logscale_y', short => 'L', type => 'flag',   mandatory => 'no',  default => undef,    allowed => undef,      disallowed => undef },
    ]   
);

$in  = Maasha::Biopieces::read_stream( $options->{ "stream_in" } );
$out = Maasha::Biopieces::write_stream( $options->{ "stream_out" } );

$phastcons_file  = Maasha::Config::genome_phastcons( $options->{ "genome" } );
$phastcons_index = Maasha::Config::genome_phastcons_index( $options->{ "genome" } );

$index           = Maasha::UCSC::Wiggle::fixedstep_index_retrieve( $phastcons_index );
$fh_phastcons    = Maasha::Filesys::file_read_open( $phastcons_file );

while ( $record = Maasha::Biopieces::get_record( $in ) ) 
{
    if ( $record->{ "CHR" } and $record->{ "CHR_BEG" } and $record->{ "CHR_END" } )
    {
        $scores = Maasha::UCSC::Wiggle::fixedstep_index_lookup( $index, $fh_phastcons, $record->{ "CHR" },
                                                                               $record->{ "CHR_BEG" },
                                                                               $record->{ "CHR_END" },
                                                                               $options->{ "flank" } );

        push @{ $AoA }, [ @{ $scores } ];
    }

    Maasha::Biopieces::put_record( $record, $out ) if not $options->{ "no_stream" };
}

Maasha::UCSC::phastcons_normalize( $AoA );

$AoA = [ [ Maasha::UCSC::phastcons_mean( $AoA ) ] ] if $options->{ "mean" };
$AoA = [ [ Maasha::UCSC::phastcons_median( $AoA ) ] ] if $options->{ "median" };

$AoA = Maasha::Matrix::matrix_flip( $AoA );

$tmp_dir = Maasha::Biopieces::get_tmpdir();

$plot = Maasha::Plot::lineplot_simple( $AoA, $options, $tmp_dir );

$fh = Maasha::Biopieces::write_stream( $options->{ "data_out" } );

print $fh "$_\n" foreach @{ $plot };

close $fh;

Maasha::Biopieces::close_stream( $in );
Maasha::Biopieces::close_stream( $out );


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


BEGIN
{
    Maasha::Biopieces::status_set();
}


END
{
    Maasha::Biopieces::status_log();
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
