#!/usr/bin/env ruby

# Copyright (C) 2007-2013 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# This program is part of the Biopieces framework (www.biopieces.org).

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Find paired end orphan in records with sequence data.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

require 'maasha/biopieces'
require 'pp'

options = Biopieces.options_parse(ARGV)

class Illumina
  def self.name_match?(name1, name2)

    if name1[-2] == '/'
      name1[0 .. -3 ] == name2[0 .. -3]                # Solexa and Illumina <= 1.5 version names
    else
      name1.split(" ").first == name2.split(" ").first # Illumina > 1.5 version names
    end
  end
end

records = []

Biopieces.open(options[:stream_in], options[:stream_out]) do |input, output|
  input.each_record do |record|
    if record[:SEQ_NAME]
      records << record

      if records.size == 2
        if Illumina.name_match?(records.first[:SEQ_NAME], records.last[:SEQ_NAME])
          records.first[:TYPE] = "paired"
          records.last[:TYPE]  = "paired"

          output.puts records.first
          output.puts records.last

          records = []
        else
          records.first[:TYPE] = "orphan"
          output.puts records.first

          records.shift
        end
      end
    end
  end

  records.each do |record|
    record[:TYPE] = "orphan"
    output.puts record
  end
end


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
