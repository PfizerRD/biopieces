#!/usr/bin/env perl

# Copyright (C) 2007-2010 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Write sequences and scores from stream to FASTA and QUAL files.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


use warnings;
use strict;
use Maasha::Biopieces;
use Maasha::Fastq;
use Maasha::Fasta;


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


my ( $options, $in, $out, $record, $data_out, $qual_out, $entry );

$options = Maasha::Biopieces::parse_options(
    [
        { long => 'no_stream', short => 'x', type => 'flag', mandatory => 'no',  default => undef, allowed => undef, disallowed => undef },
        { long => 'data_out',  short => 'o', type => 'file', mandatory => 'yes', default => undef, allowed => undef, disallowed => undef },
        { long => 'qual_out',  short => 'q', type => 'file', mandatory => 'yes', default => undef, allowed => undef, disallowed => undef },
        { long => 'compress',  short => 'Z', type => 'flag', mandatory => 'no',  default => undef, allowed => undef, disallowed => undef },
    ]   
);

$in  = Maasha::Biopieces::read_stream( $options->{ "stream_in" } );
$out = Maasha::Biopieces::write_stream( $options->{ "stream_out" } );

$data_out = Maasha::Biopieces::write_stream( $options->{ "data_out" }, $options->{ "compress" } );
$qual_out = Maasha::Biopieces::write_stream( $options->{ "qual_out" }, $options->{ "compress" } );

while ( $record = Maasha::Biopieces::get_record( $in ) ) 
{
    if ( $entry = Maasha::Fasta::biopiece2fasta( $record ) )
    {
        Maasha::Fasta::put_entry( $entry, $data_out );

        qual_put_entry( $entry->[ 0 ], $record->{ 'SCORES' }, $qual_out );
    }

    Maasha::Biopieces::put_record( $record, $out ) if not $options->{ "no_stream" };
}

close $data_out;
close $qual_out;

Maasha::Biopieces::close_stream( $in );
Maasha::Biopieces::close_stream( $out );


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


sub qual_put_entry
{
    # Martin A. Hansen, May 2010.

    # Output a score string in 454 quality format.

    my ( $name,        # entry name
         $score_str,   # scores in Solexa format.
         $fh,          # output filehandle
       ) = @_;

    # Returns nothing.

    $score_str  = Maasha::Fastq::phred_str2dec_str( $score_str );
    $score_str  =~ tr/;/ /;

    print $fh ">$name\n";
    print $fh "$score_str\n";
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


BEGIN
{
    Maasha::Biopieces::status_set();
}


END
{
    Maasha::Biopieces::status_log();
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
