#!/usr/bin/env perl

# Copyright (C) 2007-2009 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Plot one or more lines.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


use warnings;
use strict;
use Data::Dumper;
use Maasha::Common;
use Maasha::Biopieces;
use Maasha::Plot;
use Maasha::Matrix;
use Maasha::Filesys;


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


my ( $options, $in, $out, $default, $terminals, $record, $AoA, $fh, $plot, $tmp_dir, $key, @list );

$default   = "Lines";
$terminals = "dumb,x11,aqua,post,svg";

$options = Maasha::Biopieces::parse_options(
    [
        { long => 'no_stream',  short => 'x', type => 'flag',   mandatory => 'no', default => undef,    allowed => undef,      disallowed => undef },
        { long => 'data_out',   short => 'o', type => 'file',   mandatory => 'no', default => undef,    allowed => undef,      disallowed => undef },
        { long => 'keys',       short => 'k', type => 'list',   mandatory => 'no', default => undef,    allowed => undef,      disallowed => undef },
        { long => 'list',       short => 'l', type => 'string', mandatory => 'no', default => undef,    allowed => undef,      disallowed => undef },
        { long => 'terminal',   short => 't', type => 'string', mandatory => 'no', default => 'dumb',   allowed => $terminals, disallowed => undef },
        { long => 'title',      short => 'T', type => 'string', mandatory => 'no', default => $default, allowed => undef,      disallowed => undef },
        { long => 'xlabel',     short => 'X', type => 'string', mandatory => 'no', default => undef,    allowed => undef,      disallowed => undef },
        { long => 'ylabel',     short => 'Y', type => 'string', mandatory => 'no', default => undef,    allowed => undef,      disallowed => undef },
        { long => 'logscale_y', short => 'L', type => 'flag',   mandatory => 'no', default => undef,    allowed => undef,      disallowed => undef },
    ]   
);

Maasha::Common::error( qq(neither 'keys' or 'list' specified - use one or the other) )    if not defined $options->{ 'keys' } and not defined $options->{ 'list' };
Maasha::Common::error( qq(both 'keys' and 'list' specified - use only one or the other) ) if     defined $options->{ 'keys' } and     defined $options->{ 'list' };

$in  = Maasha::Biopieces::read_stream( $options->{ "stream_in" } );
$out = Maasha::Biopieces::write_stream( $options->{ "stream_out" } );

while ( $record = Maasha::Biopieces::get_record( $in ) ) 
{
    if ( defined $options->{ 'list' } and defined $record->{ $options->{ 'list' } } )
    {
        push @{ $AoA }, [ split ";", $record->{ $options->{ 'list' } } ];
    }
    elsif ( defined $options->{ 'keys' } )
    {
        undef @list;

        map { push @list, $record->{ $_ } if defined $record->{ $_ }  } @{ $options->{ 'keys' } };

        push @{ $AoA }, [ @list ] if scalar @list > 0;
    }

    Maasha::Biopieces::put_record( $record, $out ) if not $options->{ "no_stream" };
}

$AoA     = Maasha::Matrix::matrix_flip( $AoA ) if $options->{ 'list' };  # convert row to column

$tmp_dir = Maasha::Biopieces::get_tmpdir();

$plot    = Maasha::Plot::lineplot_simple( $AoA, $options, $tmp_dir );

$fh      = Maasha::Biopieces::write_stream( $options->{ "data_out" } );

print $fh "$_\n" foreach @{ $plot };

close $fh;

Maasha::Biopieces::close_stream( $in );
Maasha::Biopieces::close_stream( $out );


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


BEGIN
{
    Maasha::Biopieces::status_set();
}


END
{
    Maasha::Biopieces::status_log();
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
