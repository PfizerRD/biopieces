#!/usr/bin/env perl

# Copyright (C) 2007-2009 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Write aligned sequences from the stream as a pretty alignment.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


use warnings;
use strict;
use Maasha::Biopieces;
use Maasha::Align;


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


my ( $options, $in, $out, $record, $data_out, @entries );

$options = Maasha::Biopieces::parse_options(
    [
        { long => 'no_stream',    short => 'x', type => 'flag', mandatory => 'no', default => undef, allowed => undef, disallowed => undef },
        { long => 'data_out',     short => 'o', type => 'file', mandatory => 'no', default => undef, allowed => undef, disallowed => undef },
        { long => 'wrap',         short => 'w', type => 'uint', mandatory => 'no', default => undef, allowed => undef, disallowed => '0'   },
        { long => 'no_ruler',     short => 'R', type => 'flag', mandatory => 'no', default => undef, allowed => undef, disallowed => undef },
        { long => 'no_consensus', short => 'C', type => 'flag', mandatory => 'no', default => undef, allowed => undef, disallowed => undef },
    ]   
);

$in  = Maasha::Biopieces::read_stream( $options->{ "stream_in" } );
$out = Maasha::Biopieces::write_stream( $options->{ "stream_out" } );

$data_out = Maasha::Biopieces::write_stream( $options->{ "data_out" } ) ;

while ( $record = Maasha::Biopieces::get_record( $in ) ) 
{
    if ( $record->{ "SEQ_NAME" } and $record->{ "SEQ" } ) {
        push @entries, [ $record->{ "SEQ_NAME" }, $record->{ "SEQ" } ];
    }

    Maasha::Biopieces::put_record( $record, $out ) if not $options->{ "no_stream" };
}

if ( scalar( @entries ) == 2 ) {
    Maasha::Align::align_print_pairwise( $entries[ 0 ], $entries[ 1 ], $data_out, $options->{ "wrap" } );
} elsif ( scalar ( @entries ) > 2 ) {
    Maasha::Align::align_print_multi( \@entries, $data_out, $options->{ "wrap" }, $options->{ "no_ruler" }, $options->{ "no_consensus" } );
}

close $data_out;

Maasha::Biopieces::close_stream( $in );
Maasha::Biopieces::close_stream( $out );


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


BEGIN
{
    Maasha::Biopieces::status_set();
}


END
{
    Maasha::Biopieces::status_log();
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
