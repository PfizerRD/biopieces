#!/usr/bin/env perl

# Copyright (C) 2007-2009 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Select a number of random records from the stream.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


use warnings;
use strict;
use Maasha::Biopieces;
use Maasha::Filesys;


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


my ( $options, $in, $out, $record, $tmp_dir, $tmp_file, $fh_out, $fh_in, $count, $i, %rand_hash, $rand, $max );

$options = Maasha::Biopieces::parse_options(
    [
        { long => 'num', short => 'n', type => 'uint', mandatory => 'no', default => 10, allowed => undef, disallowed => 0 },
    ]   
);

$in  = Maasha::Biopieces::read_stream( $options->{ "stream_in" } );
$out = Maasha::Biopieces::write_stream( $options->{ "stream_out" } );

$tmp_dir  = Maasha::Biopieces::get_tmpdir();
$tmp_file = "$tmp_dir/random_records.tmp";

$fh_out = Maasha::Filesys::file_write_open( $tmp_file );

$count = 0;

while ( $record = Maasha::Biopieces::get_record( $in ) ) 
{
    Maasha::Biopieces::put_record( $record, $fh_out );

    $count++;
}

close $fh_out;

$max = 0;
$i   = 0;

Maasha::Common::error( qq(Requested random records > records in stream) ) if $options->{ "num" } > $count;

while ( $i < $options->{ "num" } )
{
    $rand = int( rand( $count ) );

    if ( not exists $rand_hash{ $rand } )
    {
        $rand_hash{ $rand } = 1;

        $max = $rand if $rand > $max;

        $i++;
    }
}

$fh_in = Maasha::Filesys::file_read_open( $tmp_file );

$count = 0;

while ( $record = Maasha::Biopieces::get_record( $fh_in ) ) 
{
    Maasha::Biopieces::put_record( $record, $out ) if exists $rand_hash{ $count };

    last if $count == $max;

    $count++;
}

close $fh_in;

unlink $tmp_file;

Maasha::Biopieces::close_stream( $in );
Maasha::Biopieces::close_stream( $out );


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


BEGIN
{
    Maasha::Biopieces::status_set();
}


END
{
    Maasha::Biopieces::status_log();
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
