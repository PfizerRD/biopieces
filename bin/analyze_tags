#!/usr/bin/env perl

# Copyright (C) 2007-2009 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Analyze sequence tags in sequence or BED records from the stream.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


use warnings;
use strict;
use Maasha::Biopieces;
use Maasha::Seq;


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


my ( $options, $in, $out, $record, %len_hash, %clone_hash, $clones, $key, $tag_record );

$options = Maasha::Biopieces::parse_options();

$in  = Maasha::Biopieces::read_stream( $options->{ "stream_in" } );
$out = Maasha::Biopieces::write_stream( $options->{ "stream_out" } );

while ( $record = Maasha::Biopieces::get_record( $in ) ) 
{
    if ( $record->{ "SEQ_NAME" } and $record->{ "SEQ" } )
    {
        if ( $record->{ "SEQ_NAME" } =~ /_(\d+)$/ )
        {
            $clones = $1;

            $len_hash{ length( $record->{ "SEQ" } ) }++;
            $clone_hash{ length( $record->{ "SEQ" } ) } += $clones;
        }
    }
    elsif ( $record->{ "Q_ID" } and $record->{ "BED_LEN" } )
    {
        if ( $record->{ "Q_ID" } =~ /_(\d+)$/ )
        {
            $clones = $1;

            $len_hash{ $record->{ "BED_LEN" } }++;
            $clone_hash{ $record->{ "BED_LEN" } } += $clones;
        }
    }
}

foreach $key ( sort { $a <=> $b } keys %len_hash )
{
    $tag_record->{ "TAG_LEN" }    = $key;
    $tag_record->{ "TAG_COUNT" }  = $len_hash{ $key };
    $tag_record->{ "TAG_CLONES" } = $clone_hash{ $key };

    Maasha::Biopieces::put_record( $tag_record, $out );
}

Maasha::Biopieces::close_stream( $in );
Maasha::Biopieces::close_stream( $out );


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


BEGIN
{
    Maasha::Biopieces::status_set();
}


END
{
    Maasha::Biopieces::status_log();
}


# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
