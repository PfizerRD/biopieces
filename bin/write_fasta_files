#!/usr/bin/env ruby

# Copyright (C) 2007-2011 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# This program is part of the Biopieces framework (www.biopieces.org).

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Write sequence type records to FASTA files according to a specified key.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

require 'maasha/biopieces'
require 'maasha/fasta'
require 'pp'

casts = []
casts << {long: 'key',       short: 'k', type: 'string', mandatory: true,  default: nil, allowed: nil,               disallowed: nil}
casts << {long: 'dir',       short: 'd', type: 'dir!',   mandatory: true,  default: nil, allowed: nil,               disallowed: nil}
casts << {long: 'prefix',    short: 'p', type: 'string', mandatory: false, default: nil, allowed: nil,               disallowed: nil}
casts << {long: 'wrap',      short: 'w', type: 'uint',   mandatory: false, default: nil, allowed: nil,               disallowed: "0"}
casts << {long: 'compress',  short: 'Z', type: 'string', mandatory: false, default: nil, allowed: "gzip,bzip,bzip2", disallowed: nil}
casts << {long: 'no_stream', short: 'x', type: 'flag',   mandatory: false, default: nil, allowed: nil,               disallowed: nil}

options = Biopieces.options_parse(ARGV, casts)

key      = options[:key].to_sym
compress = options[:compress] ? options[:compress].to_sym : nil
fh_hash  = {}

Biopieces.open(options[:stream_in], options[:stream_out]) do |input, output|
  input.each_record do |record|
    if record[:SEQ_NAME] and record[:SEQ] and record[key]
      seq = Seq.new_bp(record)

      if fh_hash[record[key].to_sym]
        fasta_io = fh_hash[record[key].to_sym]
      else
        if options[:prefix]
          fasta_file = File.join(options[:dir], [options[:prefix], record[key]].join("_") + ".fasta")
        else
          fasta_file = File.join(options[:dir], record[key] + ".fasta")
        end

        fasta_file << ".gz"  if compress == :gzip
        fasta_file << ".bz2" if compress == :bzip or compress == :bzip2
        fasta_io   = Fasta.open(fasta_file, "w", compress: compress)
        fh_hash[record[key].to_sym] = fasta_io
      end

      fasta_io.puts seq.to_fasta(options[:wrap])
    end

    output.puts record unless options[:no_stream]
  end
end

fh_hash.each_value { |val| val.close }

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
