#!/usr/bin/env ruby

# Copyright (C) 2007-2011 Martin A. Hansen.

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# http://www.gnu.org/copyleft/gpl.html

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# This program is part of the Biopieces framework (www.biopieces.org).

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DESCRIPTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# Write sequence type records to FASTQ files according to a specified key.

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

require 'maasha/biopieces'
require 'maasha/fastq'
require 'pp'

allowed_enc = 'base_33,base_64'

casts = []
casts << {long: 'key',       short: 'k', type: 'string', mandatory: true,  default: nil,       allowed: nil,               disallowed: nil}
casts << {long: 'dir',       short: 'd', type: 'dir!',   mandatory: true,  default: nil,       allowed: nil,               disallowed: nil}
casts << {long: 'prefix',    short: 'p', type: 'string', mandatory: false, default: nil,       allowed: nil,               disallowed: nil}
casts << {long: 'no_stream', short: 'x', type: 'flag',   mandatory: false, default: nil,       allowed: nil,               disallowed: nil}
casts << {long: 'compress',  short: 'Z', type: 'string', mandatory: false, default: nil,       allowed: "gzip,bzip,bzip2", disallowed: nil}
casts << {long: 'encoding',  short: 'e', type: 'string', mandatory: false, default: 'base_33', allowed: allowed_enc,       disallowed: nil}

options = Biopieces.options_parse(ARGV, casts)

encoding = options[:encoding].to_sym
compress = options[:compress] ? options[:compress].to_sym : nil

key = options[:key].to_sym

fh_hash = {}

Biopieces.open(options[:stream_in], options[:stream_out]) do |input, output|
  input.each_record do |record|
    if record[:SEQ_NAME] and record[:SEQ] and record[:SCORES] and record[key]
      entry = Seq.new_bp(record)
      entry.qual_convert!(:base_33, encoding)

      if fh_hash[record[key].to_sym]
        fastq_io = fh_hash[record[key].to_sym]
      else
        if options[:prefix]
          fastq_file = File.join(options[:dir], [options[:prefix], record[key]].join("_") + ".fastq")
        else
          fastq_file = File.join(options[:dir], record[key] + ".fastq")
        end

        fastq_file << ".gz"  if compress == :gzip
        fastq_file << ".bz2" if compress == :bzip or compress == :bzip2
        fastq_io   = Fastq.open(fastq_file, "w", compress: compress)
        fh_hash[record[key].to_sym] = fastq_io
      end

      fastq_io.puts entry.to_fastq
    end

    output.puts record unless options[:no_stream]
  end
end

fh_hash.each_value { |val| val.close }

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


__END__
